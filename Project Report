# Phase 10 Score Keeper Project Report
Sarah K Johnson
Dr. Zhonghui Wang
November 27, 2024
CSC 660
Phase 10 Score Keeper Project Report
Phase 10 is a popular household card game. Commonly played amongst family members and friends at gatherings, the scorekeeping process can be tedious and complicated. Players have to keep track of everyone’s score that has points added each round and keep track of what phase number every player is on. With all the math and different numbers being kept for each individual player, the Phase 10 Score Keeper web application is a quick and efficient tool to track each players scores, phases, and number of wins they have acquired through all the playing.
Phase 10, created by Mattel toy company, is a multiplayer card game where the goal is to be the first player to complete Phase 10. As each round is played out, players who still have cards in their hand have points added against them. The first player the complete Phase 10 is declared the winner of the game. Phase 10 keeps competitive fun while also being repayable with each game dealing different hands to each player. 
The implementation of the program consists of 6 different webpages for the front page and multiple C# classes for the backend. The front end was crated with similar styling on each page. The background for each web page is “DodgerBlue” with all the font being white and some bolded. Each button used has a grey outline with an off white background and black, bold lettering. There are multiple different components to each page including labels which hold different text values and titles. Buttons that control saving and navigating to different pages. There are list boxes that hold lists of values from the database. There is one page that has a checked list box for selecting players to participate in the game. There is also a regular check box that functions to identify if the selected player completed their “phase” in that round of scoring. There are text boxes that take in values for name, email, and score.
With all these different components being put together, Phase 10 Score Keeper becomes fully functional and ready to be used. The home page functions as a menu, there is the game title “Phase 10 Score Keeper” and 3 buttons labeled “Play Game”, “Add New Player”, and “View Scoreboard” These are all navigation buttons that take the user to the next page while removing the home or menu page. 
The “Play Game” Button on the home page takes the user to the Create Game page where the user is able to view a list of players existing in the database. The database populates the checked list by using a stored procedure that is called through the IDBConnector and the DBConnector that creates a new List of Player objects that is then, looped to populate the checked list box. Once the desired players are selected to be added to the game, the user can click the “Add Players” button which will add the players to the list box to show what players have been selected. If there is a player missing from the list that is wanting to play, there is a button on the bottom left side of the window labeled “Add New Player” that navigates to the Create Player Page. 
The Create New Player Page consists of a list box containing a full list of all names in the database and some text boxes on the right side. The text boxes are both labeled “Full Name” and “Email” with a “Add New Player” button which submits the form, adding the new player name and email to the database and list box, as well as assigning it a unique UserID number. There is a button in the top left corner that is labeled “Menu” which redirects the user back to the main menu
Once a game has been created with the selected players, the user is redirected to the Play Game Page. There are three list boxes lined up together on the left side of the screen displaying each selected player, their current score (default 0) and current phase (default 1). The default values are set because every player starts with zero points on phase one. The user can select the player whose score they are ready to record from the list box and a label in the middle of the screen should display the selected player’s full name. Under the label is a text box titled “Score” to input the selected players score and a check box to select if the player completed their phase. Upon clicking the “Save” button, the scores in the list boxes are updated to reflect the newly added score and phase. The user does this for each player every round until one of the players complete phase 10 where the user is redirected to the Winner Page that lists the winning player along with how many wins they have acquired while playing Phase 10 using the web app for score keeping. The new number of wins is updated using a store procedure that updates the database value to the new wins value.
The user can then go back to the menu and click the third button labeled “View Scoreboard” where there are two list boxes showing each user and their associated number of wins while playing Phase 10. The number of wins were sorted in descending order and a selection sort algorithm was used to sort and match each player id primary key with the foreign key in the Wins table to match the names with the newly sorted wins. 

All in all, the program achieves what it was meant to do with some added features. There were multiple problems encountered on the way. First problem was figuring out how to structure the database, which ended up being redone multiple times through development. After trying to make the score and phase values part of the player table and having issues with the mathematical aspect, it was decided that the score and phase would be a part of the Player object class so that it was easy to reference. There was no reason to save the score and phase number into the database because it would not be reused from game to game being that every game starts with the default values of zero points for the score and phase one. Having the score and phase be a part of the Player Object made it very easy to reference the selected player in the list with .score to add the new score value and update the list box to display it. This solution was for the best by upping efficiency and lowering the number of database calls. 
Another issue that came up was the overall connection of the database to the C# there was a missing definition in an appdata page that was needed to link the database to the program by server and database name. It was difficult to figure out that it needed to be added but through re-watching class lectures the missing components of the database connection, including the Dapper package that was not installed for the Phase 10 program were found and began working properly. 
Overall, the program turned out really well, it has all the desired functionality along with an extra Winner Page showcasing the winner of the game each time. The front end looks nice with the cohesive colors of blue, white, and black. The backend completes all the math and database calls properly without error, making for a solid program.

